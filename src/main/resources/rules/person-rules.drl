// @see-also(drools 8): https://docs.drools.org/8.44.0.Final/drools-docs/drools/language-reference/index.html
package com.example.rules;

// drl 核心是条件匹配, 通过条件的设计实现逻辑互联, 从而来实现if-else分支逻辑
unit PersonRules;

// 关键词 function

// Example01: 一般不在drl里面写这部分
declare Animal
    name: String
    type: String
    age: Number
end

// 全局对象
global org.slf4j.Logger logger;

// import 同 java import
import com.example.droolsdemo.model.Person;
import com.example.droolsdemo.util.RuleUtils

// @NOTE: 需要唯一
rule "CheckAdult"
//    date-effective "2021-7-09 10:00" // 报错？？？
//date-expires
    enabled true // 是否启用规则， 默认启用
    salience 10 // 优先级（优先级别高的先执行)
//    timer
    no-loop true
when
    // LHS, 变量(默认以$开始， 和普通变量区分开来),类型/属性约束, 也可以理解为方法传参
    $p: Person($age: age >= 18 )  // 匹配年龄>=18且未标记成年的人
    // exists(Custom(vip == true))
// not 语法
//when
//    not $p: Person(age >= 18, adult == false)  // 匹配年龄>=18且未标记成年的人
then
    // RHS
    // yourMethodHere($p)
    // 下面所有的步骤可以单独封装成方法调用.
    $p.setAdult(true);
//    logger.info("年龄是否大于18: {}", $getAge);
    logger.info("{} 已成年",$p.getName());
    logger.info("{} Test",String.valueOf($age));
    System.out.println($p.getName() + "状态：" + RuleUtils.getStatus(true));
    System.out.println(drools.getRule());
    // Animal dog = new Animal();
    // dog.setAge(99);
    // insert方法的作用是向工作内存中插入数据，并让相关的规则重新匹配。
    // insert(dog)
    // update方法的作用是更新工作内存中的数据，并让相关的规则重新匹配。 （要避免死循环）

    // retract($p); // 和update 相反, 移除数据
    // insert(); 插入数据， 并且重新触发
    update($p);  // 更新对象，触发依赖此对象的其他规则
end

// 检查用户性别
 rule "CheckSex"
     salience 15
 when
     $p : Person(sex == "girl")
 then
     logger.warn("{} 是一个女孩", $p.getName());
     $p.setSex("boy"); // 改变性别
     update($p); // 继续触发规则, 注意死循环
     // ?? 影响正常执行的规则没有执行
 //    drools.halt(); // 立即终止后面所有规则的执行
 end

 rule "boyPlus"
 when
    $p : Person(sex == "boy")
 then
    logger.warn("trigger boy");
    $p.setAge($p.getAge() +100);
    logger.info("年龄增加100");
 end